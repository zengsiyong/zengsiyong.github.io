---
layout:     post
title:      "servlet"
date:       2017-05-31 15:00:00
author:     "曾思勇"
header-img: "img/sky1.jpg"
header-mask: 0.3
catalog:    true
tags:
    - web服务器技术
---


### 一、Servlet简介
Servlet是**运行在服务端**的java小程序，是sun公司提供的一套规范（接口）用来处理客户端请求、相应给浏览器的动态资源。但servlet的**实质就是java代码**，通过java 的API动态地向客户输出内容

* Servlet规范：包含三个技术点（三大组件）

1.servlet技术

2.filter技术（过滤器）

3.listener技术（监听器）


### 二、Servlet快速入门
实现步骤：

1）创建类实现Servlet接口

2）覆盖尚未实现的方法---service方法

3）在web.xml进行servlet的配置

**但在实际开发中，一般不直接实现servlet接口，因为需要覆盖的方法太多，我们一般创建类继承HttpServlet**

实现步骤：

1）创建类继承HttpServlet类

2）覆盖doGet和doPost

3）在web.xml中进行servlet的配置


### 三、servlet的执行过程

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-f20e769d4ddedbc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-da4d8e2fa036675d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)



### 四、Servlet生命周期

用户通过单击某个链接或者直接在浏览器的地址栏中输入URL来访问Servlet，Web服务器接收到请求后，先将请求交给Servlet容器/web容器。默认第一次访问时创建Servlet对象，在服务器关闭时销毁Servlet对象。当Servlet对象创建时会调用init方法，销毁时会调用destroy方法，而每次访问Servlet时都会调用service方法

(1)**Servlet接口中的方法**

1）init(ServletConfig config)
何时执行：servlet对象创建的时候执行
ServletConfig ： 代表的是该servlet对象的配置信息

2）service（ServletRequest request,ServletResponse response）
何时执行：每次请求都会执行
ServletRequest ：代表请求 认为ServletRequest 内部封装的是										http请求的信息
ServletResponse ：代表响应 认为要封装的是响应的信息

3）destroy()
何时执行：servlet销毁的时候执行


(2)**HttpServlet类的方法**

1）init()

2）doGet(HttpServletRequest request,HttpServletResponse response)

3）doPost(HttpServletRequest request,HttpServletResponse response)

4）destroy()

(3)**Servlet的生命周期（面试题）**

1）Servlet何时创建
默认第一次访问servlet时创建该对象

2）Servlet何时销毁
服务器关闭servlet就销毁了

3）每次访问必然执行的方法
service(ServletRequest req, ServletResponse res)方法


问题：对XXXServlet进行了10次访问，init()，destory()，service()，doGet()，doPost()	一共执行力多少次？request对象创建几个？response创建几个？
init()：1次
destroy()：0次
service()：10次
request和response对象：10个

注意：关于servlet的自动创建service方法调用的参数对象req和res
http://blog.sina.com.cn/s/blog_823128380101bhd0.html

### 四、Servlet的配置

1.**url-pattern的配置方法**

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-c36c45fe225c3f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-06c85bd9e0ea06cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

### 五、ServletContext对象
* **什么是ServletContext对象**

ServletContext代表是一个web应用的环境（上下文）对象，ServletContext对象	内部封装是该web应用的信息，**ServletContext对象一个web应用只有一个**
  * 问题：一个web应用有几个servlet对象？----多个
  * ServletContext对象的生命周期？

**创建**：该web应用被加载（服务器启动或发布web应用（前提，服务器启动状	态））

**销毁**：web应用被卸载（服务器关闭，移除该web应用）

* **怎样获得ServletContext对象**

1）ServletContext servletContext = config.getServletContext();（一般不用）

2）**ServletContext servletContext = this.getServletContext();**

（this可以不写，因为getServletContext()在父父类中已经定义了如方法1的config对象调用getServletContext()）

* **ServletContext的作用**

(1)**获得web应用全局的初始化参数**

  * web.xml中配置初始化参数
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-d8633d7c9a9737af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
  * 通过context对象获得参数
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-3eafccc5e5b0cb76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

(2)**获得web应用中任何资源的绝对路径**（重要 重要 重要）

方法1：**String path = context.getRealPath(相对于该web应用的相对地址);**

方法2：**类加载器**
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-bb8ec7e984cbe9cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

(3)**ServletContext是一个域对象**（重要 重要 重要）
  * 什么是域对象？什么是域？
  
存储数据的区域就是域对象

  * ServletContext域对象的作用范围：
  
整个web应用（所有的web资源都可以随意向	servletcontext域中存取数据，数据可以共享）

  * 域对象的通用的方法：
  
setAtrribute(String name,Object obj);
getAttribute(String name);
removeAttribute(String name);

* 示例代码：记录登入人的个数

先在继承父父类的init()方法中输写Servletcontext域中存一个数据count
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-d5f0dd9750701f06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
再在登入成功后的条件语句中输写从servletcontext中取出count进行运算，最后再将计算好的count结果值存入servletcontext域中
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2762413-e122abeb242d24a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)